type: edu
custom_name: stage7
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n1 +++ 2 * 3 -- 4\n/exit": "2\n-5\n11\n11\nBye!",
                     "/command\n/exit": "Unknown command\nBye!",
                     "3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1)\n/exit": "121\nBye!",
                     "8 * 3 + 12 * (4 - 2)\n4 * (2 + 3\n4 + 3)\n/exit": "48\nInvalid expression\nInvalid expression\nBye!",
                     "a = 4\nb = 5\nc = 6\na*2+b*3+c*(2+3)\n/exit": "53\nBye!",
                     "a = 1\na = 2\na = 3\na\n/exit": "3\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    class Calculator:
        def __init__(self):
            self.variables_dict = {}

        @staticmethod
        def addition(first, second):
            return first + second

        @staticmethod
        def subtraction(first, second):
            return first - second

        def parse_token(self, token):
            try:
                if token.isalpha():
                    return self.variables_dict[token]
                return token
            except KeyError:
                print("Unknown variable")
                return False
            except ValueError:
                print("Invalid identifier")
                return False

        def parse_string(self, string):
            string = string.split()
            x = self.parse_token(string[0])
            if not x:
                return
            for i in range(1, len(string), 2):
                sign = string[i]
                y = self.parse_token(string[i + 1])
                if x and y:
                    if "+" in sign or sign.count("-") % 2 == 0:
                        x = self.addition(int(x), int(y))
                    else:
                        x = self.subtraction(int(x), int(y))
                else:
                    return
            print(x)

        def add_variable(self, string):
            try:
                variable, value = string.split("=")
            except ValueError:
                print("Invalid assignment")
            else:
                variable = variable.strip()
                value = value.strip()
                if not variable.isalpha():
                    print("Invalid identifier")
                elif not value.isdigit() and not value.isalpha():
                    print("Invalid assignment")
                else:
                    if value in self.variables_dict.keys():
                        self.variables_dict[variable] = self.variables_dict[value]
                    elif value.isalpha():
                        print("Unknown variable")
                    else:
                        self.variables_dict[variable] = value

        @staticmethod
        def parse_command(command):
            if command == "/help":
                print("The program calculates the sum of numbers")
                return 1
            if command == "/exit":
                print("Bye!")
                return 0
            print("Unknown command")
            return 1

        def run(self):
            while True:
                user_input = input()
                if user_input.startswith("/"):
                    if not self.parse_command(user_input):
                        break
                elif user_input == "":
                    continue
                elif "=" in user_input:
                    self.add_variable(user_input)
                else:
                    try:
                        self.parse_string(user_input)
                    except (ValueError, IndexError):
                        print("Invalid expression")


    calculator = Calculator()
    calculator.run()
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/415/implement
status: Solved
record: -1
